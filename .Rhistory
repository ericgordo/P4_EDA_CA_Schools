install.packages("swirl")
library(swirl)
swirl()
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", Eric Gordon)
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Eric Gordon")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
tail(mtcars, 3)
?data
mtcars$mpg
mean(mtcars$mpg)
mean(mtcars$mpg)
udacious
demo()
glm.vr
image
?graphics
quit()
ggplot(data =school.df,
aes(x=PctGE21,y=PctGE1500, color= Charter))+
geom_point ( alpha=2/3, size=3/4) +
geom_hline (yintercept =50, linetype=3) +
geom_vline (xintercept = 50, linetype=3)+
scale_color_manual ( values=c("sienna2", "#0000CC"))+
geom_smooth (method="lm",se=FALSE, size=1, color="red")+
labs(color="Charter") +
xlab ("% Students Scoring Above ACT 21")+
ylab ("% Students Scoring Above SAT 1500")
cor(x=school.df$PctGE21, y=school.df$PctGE1500, use="complete.obs")
#Getting Stats to Seperate
both <- subset (school.df,
!is.na(PctGE21) & !is.na(PctGE1500))
q1 <- subset (both,
PctGE21<50 & PctGE1500<50)
print("Are Schools That Fall Below Avg For Both Tests Charters?")
table(q1$Charter)
print("How Many are Charters on Entire Plot?")
table(both$Charter)
print("ACT Summary")
tapply(school.df$PctGE21, school.df$Charter, summary)
print("SAT Summary")
tapply(school.df$PctGE1500, school.df$Charter, summary)
#ACT Investigation
ACT1 <- ggplot (data =school.df, aes(x=NumTstTakr.x)) +
geom_histogram(binwidth = 10) +
labs(title="ACT Test Takers")+ ylab("Count")
ACT2 <- ggplot (data =school.df, aes(x=NumGE21)) +
geom_histogram (binwidth = 15) +
labs(title="Number of Students Scoring Above 21 ACT") +
ylab("Count")
grid.arrange (ACT1, ACT2, nrow=1)
#Numeric Stats
sum (school.df$NumTstTakr.x, na.rm = TRUE)
sum (school.df$NumGE21, na.rm = TRUE)
summary(school.df$NumGE21, na.rm = TRUE)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
library(maps)
library(zipcode)
library(ggplot2)
library(mapdata)
library(reshape2)
library(dplyr)
library(plyr)
library(tidyr)
library(gridExtra)
library(ggthemes)
library(GGally)
# Load the Data
setwd("/Users/ericgordo/Documents/Udacity/P4_EDA_Course_Materials/P4/P4_EDA_CA_Schools/Data")
#import Files as Dataframes
act<-read.csv("act15.csv", stringsAsFactors = FALSE)
sat<-read.csv("sat15.csv", stringsAsFactors = FALSE)
schools<-read.csv("pubschls.csv", stringsAsFactors = FALSE)
dropouts<-read.csv("filesdropouts.txt", sep="\t", stringsAsFactors = FALSE)
# Work for the Data I want!
#act data Cleaning
act <- act %>%
subset (rtype=="S") %>%
subset (select=-c (rtype,Enroll12,
year,dname,cname,sname)) %>% #Columns to Drop
subset(AvgScrEng!='*' & !is.na(AvgScrEng)) %>%   #Drop Columns with NO Values
#Change Data Types For Numeric Columns
transform (AvgScrEng=as.numeric(AvgScrEng),
AvgScrMath=as.numeric(AvgScrMath),
AvgScrRead=as.numeric(AvgScrRead),
AvgScrSci=as.numeric(AvgScrSci),
NumGE21=as.numeric(NumGE21),
PctGE21=as.numeric(PctGE21))
#SAT data cleaning
sat<- sat %>%
subset (sat$rtype=="S") %>% #Only schools, not District Totals
subset (select=-c(rtype,enroll12,dname,cname,sname)) %>%  #Columns to Drop
subset (AvgScrMath!='*' & !is.na(AvgScrMath)) %>%   #Drop Columns with NO Values
#Change Data Types For Numeric Columns
transform (AvgScrRead=as.numeric (AvgScrRead),
AvgScrMath=as.numeric (AvgScrMath),
AvgScrWrite=as.numeric (AvgScrWrite),
PctGE1500=as.numeric (PctGE1500),
NumGE1500=as.numeric (NumGE1500))
sat$AvgSum <- sat$AvgScrRead + sat$AvgScrWrite + sat$AvgScrMath #Add An Average Combined Score
#schools data cleaning
schools <- schools%>%
subset (schools$StatusType=="Active") %>% #Only Active Schools
subset (select=c (CDSCode,County,District,
School,City,
Charter,Magnet,
Latitude,Longitude,
EdOpsName)) # Columns to keep
# Dropout Data
dropouts <- dropouts %>%
subset (select=c(CDS_CODE,DTOT,ETOT))
dropouts <- aggregate(data=dropouts,
cbind(ETOT, DTOT)~CDS_CODE, sum)
#Final DataFrame Creation
school.df <- merge (act, sat, by = "cds", all=TRUE)
school.df <- school.df %>%
merge (dropouts, by.x="cds", by.y="CDS_CODE")%>%
merge (schools, by.x = "cds", by.y="CDSCode")
setwd("/Users/ericgordo/Documents/Udacity/P4_EDA_Course_Materials/P4/P4_EDA_CA_Schools")
#ACT Investigation
ACT1 <- ggplot (data =school.df, aes(x=NumTstTakr.x)) +
geom_histogram(binwidth = 10) +
labs(title="ACT Test Takers")+ ylab("Count")
ACT2 <- ggplot (data =school.df, aes(x=NumGE21)) +
geom_histogram (binwidth = 15) +
labs(title="Number of Students Scoring Above 21 ACT") +
ylab("Count")
grid.arrange (ACT1, ACT2, nrow=1)
#Numeric Stats
sum (school.df$NumTstTakr.x, na.rm = TRUE)
sum (school.df$NumGE21, na.rm = TRUE)
summary(school.df$NumGE21, na.rm = TRUE)
ggplot (data =school.df, aes(x=PctGE21,y=PctGE1500)) +
geom_point(alpha=3/4, size=3/4)+
ylab("% Above Average SAT")+
xlab("% Above Average ACT")+
geom_hline(yintercept =50, linetype=3) +
geom_vline(xintercept = 50, linetype=3)+
geom_smooth(method="lm")+
labs(title="Percent Above Average, ACT Vs. SAT")
cor(x=school.df$PctGE21, y=school.df$PctGE1500, use="complete.obs")
print("Percent of Students Above 21")
summary(school.df$PctGE21)
print("Percent of Students Above 1500")
summary(school.df$PctGE1500)
ggplot (data =school.df, aes(x=PctGE21,y=PctGE1500)) +
geom_point(alpha=3/4, size=3/4)+
ylab("% Above Average SAT")+
xlab("% Above Average ACT")+
geom_hline(yintercept =50, linetype=3) +
geom_vline(xintercept = 50, linetype=3)+
geom_smooth(method="lm")+
labs(title="Percent Above Average, ACT Vs. SAT")
# Load all of the packages that you end up using
# in your analysis in this code chunk.
library(maps)
library(zipcode)
library(ggplot2)
library(mapdata)
library(reshape2)
library(dplyr)
library(plyr)
library(tidyr)
library(gridExtra)
library(ggthemes)
library(GGally)
# Load the Data
setwd("/Users/ericgordo/Documents/Udacity/P4_EDA_Course_Materials/P4/P4_EDA_CA_Schools/Data")
#import Files as Dataframes
act<-read.csv("act15.csv", stringsAsFactors = FALSE)
sat<-read.csv("sat15.csv", stringsAsFactors = FALSE)
schools<-read.csv("pubschls.csv", stringsAsFactors = FALSE)
dropouts<-read.csv("filesdropouts.txt", sep="\t", stringsAsFactors = FALSE)
# Work for the Data I want!
#act data Cleaning
act <- act %>%
subset (rtype=="S") %>%
subset (select=-c (rtype,Enroll12,
year,dname,cname,sname)) %>% #Columns to Drop
subset(AvgScrEng!='*' & !is.na(AvgScrEng)) %>%   #Drop Columns with NO Values
#Change Data Types For Numeric Columns
transform (AvgScrEng=as.numeric(AvgScrEng),
AvgScrMath=as.numeric(AvgScrMath),
AvgScrRead=as.numeric(AvgScrRead),
AvgScrSci=as.numeric(AvgScrSci),
NumGE21=as.numeric(NumGE21),
PctGE21=as.numeric(PctGE21))
#SAT data cleaning
sat<- sat %>%
subset (sat$rtype=="S") %>% #Only schools, not District Totals
subset (select=-c(rtype,enroll12,dname,cname,sname)) %>%  #Columns to Drop
subset (AvgScrMath!='*' & !is.na(AvgScrMath)) %>%   #Drop Columns with NO Values
#Change Data Types For Numeric Columns
transform (AvgScrRead=as.numeric (AvgScrRead),
AvgScrMath=as.numeric (AvgScrMath),
AvgScrWrite=as.numeric (AvgScrWrite),
PctGE1500=as.numeric (PctGE1500),
NumGE1500=as.numeric (NumGE1500))
sat$AvgSum <- sat$AvgScrRead + sat$AvgScrWrite + sat$AvgScrMath #Add An Average Combined Score
#schools data cleaning
schools <- schools%>%
subset (schools$StatusType=="Active") %>% #Only Active Schools
subset (select=c (CDSCode,County,District,
School,City,
Charter,Magnet,
Latitude,Longitude,
EdOpsName)) # Columns to keep
# Dropout Data
dropouts <- dropouts %>%
subset (select=c(CDS_CODE,DTOT,ETOT))
dropouts <- aggregate(data=dropouts,
cbind(ETOT, DTOT)~CDS_CODE, sum)
#Final DataFrame Creation
school.df <- merge (act, sat, by = "cds", all=TRUE)
school.df <- school.df %>%
merge (dropouts, by.x="cds", by.y="CDS_CODE")%>%
merge (schools, by.x = "cds", by.y="CDSCode")
setwd("/Users/ericgordo/Documents/Udacity/P4_EDA_Course_Materials/P4/P4_EDA_CA_Schools")
ggplot (data =school.df, aes(x=PctGE21,y=PctGE1500)) +
geom_point(alpha=3/4, size=3/4)+
ylab("% Above Average SAT")+
xlab("% Above Average ACT")+
geom_hline(yintercept =50, linetype=3) +
geom_vline(xintercept = 50, linetype=3)+
geom_smooth(method="lm")+
labs(title="Percent Above Average, ACT Vs. SAT")
cor(x=school.df$PctGE21, y=school.df$PctGE1500, use="complete.obs")
print("Percent of Students Above 21")
summary(school.df$PctGE21)
print("Percent of Students Above 1500")
summary(school.df$PctGE1500)
ggplot (data =school.df, aes(x=ETOT,y=NumGE21))+
geom_point(alpha=3/4,size=3/4)+
geom_smooth(method="lm")+
labs(title="Number of ACT Above Average Vs. Enrollment")
cor(x=school.df$ETOT, y=school.df$PctGE21, use="complete.obs")
d1 <- ggplot (data =subset (school.df, !is.na(PctGE1500)),
aes(x=PctGE1500, y=DTOT)) +
geom_point()+
labs(title="DropOuts Vs. High Scoring SAT")+
ylab("Number of Dropouts")+
geom_smooth(method="lm")
d2 <- ggplot (data =subset(school.df,
!is.na(NumGE21)),
aes(x=PctGE21, y=DTOT))+
geom_point()+
labs(title="DropOuts Vs. High Scoring ACT")+
ylab("Number of Dropouts")+
geom_smooth(method="lm")
grid.arrange(d1,d2)
cor(x=school.df$DTOT, y=school.df$PctGE1500, use="complete.obs")
cor(x=school.df$DTOT, y=school.df$PctGE21, use="complete.obs")
read_vs_math <- ggplot (data =school.df,
aes(x=AvgScrRead.y,y=AvgScrMath.y)) +
geom_point(alpha=3/4,size=3/4) +
labs(title="SAT Reading vs. Math")
read_vs_math + geom_text (data=subset(school.df,
AvgScrRead.y<350 & AvgScrMath.y>430),
aes(label=School),
size=2.5, nudge_y = -5.5)
read_vs_math + geom_hline (yintercept =500, linetype=3) +
geom_vline(xintercept = 500, linetype=3) +
stat_smooth(method = "lm")
cor(x=school.df$AvgScrRead.y, y=school.df$AvgScrMath.y, use="complete.obs")
score_model <- lm (data=school.df,
AvgScrMath.y ~ AvgScrRead.y +AvgScrWrite
)
score_model
Agoura <- data.frame (AvgScrRead.y=571, AvgScrWrite=573)
modelEstimate = predict(
score_model, newdata = Agoura,
interval="prediction", level = .95)
modelEstimate
print (subset (school.df,
School=="Agoura High")$AvgScrMath.y)
d1 <- ggplot (data =subset (school.df, !is.na(PctGE1500)),
aes(x=PctGE1500, y=DTOT)) +
geom_point()+
labs(title="DropOuts Vs. High Scoring SAT")+
ylab("Number of Dropouts")+
geom_smooth(method="lm")
d2 <- ggplot (data =subset(school.df,
!is.na(NumGE21)),
aes(x=PctGE21, y=DTOT))+
geom_point()+
labs(title="DropOuts Vs. High Scoring ACT")+
ylab("Number of Dropouts")+
geom_smooth(method="lm")
grid.arrange(d1,d2)
cor(x=school.df$DTOT, y=school.df$PctGE1500, use="complete.obs")
cor(x=school.df$DTOT, y=school.df$PctGE21, use="complete.obs")
ggplot (data =school.df, aes(x=ETOT,y=NumGE21))+
geom_point(alpha=3/4,size=3/4)+
geom_smooth(method="lm")+
labs(title="Number of ACT Above Average Vs. Enrollment")
cor(x=school.df$ETOT, y=school.df$PctGE21, use="complete.obs")
ggplot (data =school.df, aes(x=PctGE21,y=PctGE1500)) +
geom_point(alpha=3/4, size=3/4)+
ylab("% Above Average SAT")+
xlab("% Above Average ACT")+
geom_hline(yintercept =50, linetype=3) +
geom_vline(xintercept = 50, linetype=3)+
geom_smooth(method="lm")+
labs(title="Percent Above Average, ACT Vs. SAT")
cor(x=school.df$PctGE21, y=school.df$PctGE1500, use="complete.obs")
print("Percent of Students Above 21")
summary(school.df$PctGE21)
print("Percent of Students Above 1500")
summary(school.df$PctGE1500)
Agoura <- data.frame (AvgScrRead.y=571, AvgScrWrite=573)
modelEstimate = predict(
score_model, newdata = Agoura,
interval="prediction", level = .95)
modelEstimate
print (subset (school.df,
School=="Agoura High")$AvgScrMath.y)
Agoura <- data.frame (AvgScrRead.y=571, AvgScrWrite=573)
modelEstimate = predict(
score_model, newdata = Agoura,
interval="prediction", level = .95)
modelEstimate
print (subset (school.df,
School=="Agoura High")$AvgScrMath.y)
ggplot(data =school.df,
aes(x=PctGE21,y=PctGE1500, color= Charter))+
geom_point ( alpha=2/3, size=3/4) +
geom_hline (yintercept =50, linetype=3) +
geom_vline (xintercept = 50, linetype=3)+
scale_color_manual ( values=c("sienna2", "#0000CC"))+
geom_smooth (method="lm",se=FALSE, size=1, color="red")+
labs(color="Charter") +
xlab ("% Students Scoring Above ACT 21")+
ylab ("% Students Scoring Above SAT 1500")
cor(x=school.df$PctGE21, y=school.df$PctGE1500, use="complete.obs")
#Getting Stats to Seperate
both <- subset (school.df,
!is.na(PctGE21) & !is.na(PctGE1500))
q1 <- subset (both,
PctGE21<50 & PctGE1500<50)
print("Are Schools That Fall Below Avg For Both Tests Charters?")
table(q1$Charter)
print("How Many are Charters on Entire Plot?")
table(both$Charter)
print("ACT Summary")
tapply(school.df$PctGE21, school.df$Charter, summary)
print("SAT Summary")
tapply(school.df$PctGE1500, school.df$Charter, summary)
summary(school.df$PctGE1500)
summary(school.df$PctGE21)
grid.arrange (CA.ACT + labs (title="% of Students Above Avg. (ACT)", color="%Students >21")+
xlab("Longitude")+
ylab("Latitude"),
CA.SAT + labs (title="Avg. Overall SAT", color="Avg. SAT Sum")+
xlab("Longitude")+
ylab("Latitude"),
CA.DTOT + labs(title="Schools with High Dropouts", color="# of Dropouts")+
xlab("Longitude")+
ylab("Latitude"),
ncol=2, layout_matrix=cbind(c(1,1),c(2,3)))
averages <- ggplot(data =school.df,
aes(x=PctGE21,y=PctGE1500, color=color))+
geom_point(alpha=3/4,size=3/4) +
geom_hline(yintercept =50, linetype=3) +
geom_vline(xintercept = 50, linetype=3)
color <- school.df$County
averages
usa <- map_data ("state")
ca <- subset (usa, usa$region=="california")
#Basic Map for California
CA.MAP <- ggplot()+
geom_polygon(data=ca, aes(x=long, y=lat),fill="Grey")+
coord_fixed(1.3)+
theme(panel.background =element_rect(fill ="white"))
CA.ACT <- CA.MAP +
geom_point(data=school.df,
aes(x=Longitude,y=Latitude, colour=PctGE21),size=1/3)+
scale_color_gradientn(
colours = colorRampPalette(c("Red", "Blue"))(10))
CA.SAT <- CA.MAP +
geom_point (data=school.df,
aes (x=Longitude,y=Latitude, colour=AvgSum),size=1/3)+
scale_color_gradientn (
colours = colorRampPalette(c("Red","Purple" ,"Blue"))(10))
CA.DTOT <- CA.MAP +
geom_jitter (data=subset(school.df,
DTOT>=50 & DTOT<700),
aes(x=Longitude,y=Latitude, colour=DTOT), size=1/10) +
scale_color_gradientn(
colours = colorRampPalette(c( "purple", "Red"))(10))
grid.arrange (CA.ACT + labs (title="% of Students Above Avg. (ACT)", color="%Students >21")+
xlab("Longitude")+
ylab("Latitude"),
CA.SAT + labs (title="Avg. Overall SAT", color="Avg. SAT Sum")+
xlab("Longitude")+
ylab("Latitude"),
CA.DTOT + labs(title="Schools with High Dropouts", color="# of Dropouts")+
xlab("Longitude")+
ylab("Latitude"),
ncol=2, layout_matrix=cbind(c(1,1),c(2,3)))
usa <- map_data ("state")
ca <- subset (usa, usa$region=="california")
#Basic Map for California
CA.MAP <- ggplot()+
geom_polygon(data=ca, aes(x=long, y=lat),fill="Grey")+
coord_fixed(1.3)+
theme(panel.background =element_rect(fill ="white"))
CA.ACT <- CA.MAP +
geom_point(data=school.df,
aes(x=Longitude,y=Latitude, colour=PctGE21),size=1/10)+
scale_color_gradientn(
colours = colorRampPalette(c("Red", "Blue"))(10))
CA.SAT <- CA.MAP +
geom_point (data=school.df,
aes (x=Longitude,y=Latitude, colour=AvgSum),size=1/10)+
scale_color_gradientn (
colours = colorRampPalette(c("Red","Purple" ,"Blue"))(10))
CA.DTOT <- CA.MAP +
geom_jitter (data=subset(school.df,
DTOT>=50 & DTOT<700),
aes(x=Longitude,y=Latitude, colour=DTOT), size=1/10) +
scale_color_gradientn(
colours = colorRampPalette(c( "purple", "Red"))(10))
grid.arrange (CA.ACT + labs (title="% of Students Above Avg. (ACT)", color="%Students >21")+
xlab("Longitude")+
ylab("Latitude"),
CA.SAT + labs (title="Avg. Overall SAT", color="Avg. SAT Sum")+
xlab("Longitude")+
ylab("Latitude"),
CA.DTOT + labs(title="Schools with High Dropouts", color="# of Dropouts")+
xlab("Longitude")+
ylab("Latitude"),
ncol=2, layout_matrix=cbind(c(1,1),c(2,3)))
